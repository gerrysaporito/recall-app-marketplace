// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  type              String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  webhooks      Webhook[]
  webhookEvents WebhookEvent[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  App           App[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Webhook {
  id  String @id @default(cuid())
  url String // e.g., https://suisei.io/api/webhook

  // Relations
  userId String
  user   User           @relation(fields: [userId], references: [id])
  events WebhookEvent[]

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft deletes or block
  App       App[]
}

model WebhookEvent {
  id                 String    @id @default(cuid())
  status             String
  type               String // e.g., "account.created"
  requestBody        String? // e.g., {"name": "Gerry"}
  responseStatus     Int? // e.g., 200
  responseBody       String? // e.g., {"message": "Account created"}
  failureReason      String? // e.g., "Request failed"
  retryCount         Int? // Tracks the number of retry attempts
  lastRetryAt        DateTime? // Timestamp of last retry attempt
  requestSentAt      DateTime?
  responseReceivedAt DateTime?

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  webhookId String
  webhook   Webhook @relation(fields: [webhookId], references: [id])

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft deletes or block
}

model App {
  id          String         @id @default(cuid())
  name        String
  description String         @default("")
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  webhookId   String
  webhook     Webhook        @relation(fields: [webhookId], references: [id])
  dataFields  AppDataField[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
}

model AppDataField {
  id        String    @id @default(cuid())
  key       String
  value     String?
  appId     String
  app       App       @relation(fields: [appId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
