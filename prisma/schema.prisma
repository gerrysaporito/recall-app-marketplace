// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Authentication and User Management Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  type              String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  webhooks      Webhook[]
  webhookEvents WebhookEvent[]
  apps          App[]
  botTemplates  BotTemplate[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

// Webhook System Models
model Webhook {
  id  String @id @default(cuid())
  url String // e.g., https://suisei.io/api/webhook

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft deletes or block

  // Relations
  userId String
  user   User           @relation(fields: [userId], references: [id])
  events WebhookEvent[]
  apps   App[]
}

model WebhookEvent {
  id                 String    @id @default(cuid())
  status             String
  type               String // e.g., "account.created"
  requestBody        String? // e.g., {"name": "Gerry"}
  responseStatus     Int? // e.g., 200
  responseBody       String? // e.g., {"message": "Account created"}
  failureReason      String? // e.g., "Request failed"
  retryCount         Int? // Tracks the number of retry attempts
  lastRetryAt        DateTime? // Timestamp of last retry attempt
  requestSentAt      DateTime?
  responseReceivedAt DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft deletes or block

  // Relations
  userId    String
  webhookId String
  user      User    @relation(fields: [userId], references: [id])
  webhook   Webhook @relation(fields: [webhookId], references: [id])
}

// App and Bot System Models
model App {
  id          String @id @default(cuid())
  name        String
  description String @default("")

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  userId          String
  webhookId       String
  user            User             @relation(fields: [userId], references: [id])
  webhook         Webhook          @relation(fields: [webhookId], references: [id])
  dataFields      AppDataField[]
  botTemplateApps BotTemplateApp[]
  botTemplateId   String?
  botTemplate     BotTemplate?     @relation(fields: [botTemplateId], references: [id])
}

model AppDataField {
  id    String  @id @default(cuid())
  type  String
  key   String
  value String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  appId                    String
  app                      App                       @relation(fields: [appId], references: [id])
  botTemplateAppDataFields BotTemplateAppDataField[]
}

model BotTemplate {
  id   String @id @default(cuid())
  name String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  apps            App[]
  botTemplateApps BotTemplateApp[]
  bots            Bot[]
}

model BotTemplateApp {
  id String @id @default(cuid())

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  appId                    String
  app                      App                       @relation(fields: [appId], references: [id])
  botTemplateAppDataFields BotTemplateAppDataField[]
  botTemplateId            String
  botTemplate              BotTemplate               @relation(fields: [botTemplateId], references: [id])
  botTriggerEvents         BotTriggerEvent[]
}

model BotTemplateAppDataField {
  id    String  @id @default(cuid())
  type  String
  value String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  botTemplateAppId String
  botTemplateApp   BotTemplateApp @relation(fields: [botTemplateAppId], references: [id])
  appDataFieldId   String
  appDataField     AppDataField   @relation(fields: [appDataFieldId], references: [id])
}

model Bot {
  id          String @id @default(cuid())
  meetingUrl  String
  recallBotId String
  name        String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  botTemplateId   String
  botTemplate     BotTemplate       @relation(fields: [botTemplateId], references: [id])
  botTranscript   BotTranscript[]
  botTriggerEvent BotTriggerEvent[]
}

model BotTranscript {
  id          String  @id @default(cuid())
  recordingId String
  speakerName String?
  speakerId   String
  word        String
  startTime   Int
  endTime     Int
  confidence  Float

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  botId String
  bot   Bot    @relation(fields: [botId], references: [id])
}

model BotTriggerEvent {
  id             String  @id
  actionName     String
  triggerEventId String  @unique
  recordingId    String
  speakerName    String?
  speakerId      String
  recallBotId    String
  data           String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  botId            String
  bot              Bot            @relation(fields: [botId], references: [id])
  botTemplateAppId String
  botTemplateApp   BotTemplateApp @relation(fields: [botTemplateAppId], references: [id])
}
